name: API M√©t√©o CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Configuration de Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Installation des d√©pendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Ex√©cution des tests
      run: |
        pytest

  build_and_push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v3
    - name: Configuration de Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Construction et export
      uses: docker/build-push-action@v4
      with:
        context: .
        tags: api-meteo:latest
        outputs: type=docker,dest=/tmp/api-meteo.tar
    
    - name: Connexion √† Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Pousser vers Docker Hub
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: siflybel/api-meteo:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    # S'ex√©cute uniquement si c'est un push sur main ou master (apr√®s un merge)
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    environment: production
    steps:
      - name: Checkout du code source
        uses: actions/checkout@v3
        
      - name: D√©ploiement sur le serveur (simulation)
        env:
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        run: |
          # Option 1: Utiliser le script de d√©ploiement local pour simuler un d√©ploiement
          chmod +x ./deploy.sh
          # Simuler seulement (sans r√©ellement d√©marrer le conteneur)
          echo "üîÑ Simulation de d√©ploiement..."
          
          # Afficher les √©tapes sans ex√©cuter les commandes docker
          grep "log" ./deploy.sh | grep -v "if" | sed 's/log "/echo "/g'
          
          echo "‚úÖ Simulation de d√©ploiement termin√©e!"
      
      # Pour un d√©ploiement r√©el, d√©commentez et configurez cette section
      # - name: Configuration de la cl√© SSH
      #   uses: webfactory/ssh-agent@v0.7.0
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      # - name: Copier le script de d√©ploiement sur le serveur
      #   run: |
      #     scp -o StrictHostKeyChecking=no ./deploy.sh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/deploy.sh
      
      # - name: Ex√©cuter le script de d√©ploiement sur le serveur
      #   env:
      #     OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
      #   run: |
      #     ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "chmod +x /tmp/deploy.sh && OPENWEATHER_API_KEY=$OPENWEATHER_API_KEY /tmp/deploy.sh"

      - name: Notification de d√©ploiement
        run: |
          echo "üìß Envoi d'une notification de d√©ploiement r√©ussi"
          echo "üåê Application d√©ploy√©e avec succ√®s"
          echo "üìä Version de l'application: $(date +'%Y.%m.%d-%H%M')"
          echo "üë§ D√©ploy√© par: ${{ github.actor }}" 